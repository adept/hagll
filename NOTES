-*- mode: org -*-
* Мысли вслух

Есть оригинальная статья про GLL. В ней крайне неудобная для Haskell (и вообще для реальной жизни) реализация - из-за unrestricted goto и предложения использовать один глобальный switch для всего парсера.

Все эти проблемы более-менее неплохо разжеваны в статье товарища, который писал реализацию на Scala.

Но у него были другие проблемы - отсутствие оптимизации tail calls в JVM. Поэтому он вместо switch придумал свой велосипед в виде trampolines. Кроме того, у него есть возможность сравнивать экземпляры класса, что, как я понял при первом прочтении, помогло ему реализовать обнаружение случая взаимнорекурсивных циклов в парсерах вручную.

Но мы пишем на Haskell. У нас нет проблем с tail calls, но есть проблема с циклами и sharing-ом (как мне сейчас кажется).

* Соответственно, план атаки мне виделся таким:
** Вникнуть в основые моменты алгоритма (по оригинальной статье)
** Вникнуть в то, как подошел к вопросу товарищ со Скалой
** Попробовать воссоздать его результаты (или часть), чтобы еще лучше вникнуть в суть вопроса.
   (это то, что я начал делать, и нашел у него в коде три опечатки,
   без которых все не работает)
** Прикинуть, какие же есть подводные камни с Haskell и как их обойти
** Сделать какой-то наколенный proof-of-concept
** Сравнить его с parsec/polyparse с одной стороны, и чем-то типа happy/glr или [[http://www.cs.uwindsor.ca/~hafiz/proHome.html][X-SAIGA]] с другой стороны (последнее - особенно итересно, т.к. это тоже комбинаторы, и тоже "универсальный" парсер, и реализация на haskell)
** Если скорость выходит, как обещано (в особенности та часть, которая говорит, что для LALR(1) грамматик этот алгоритм должен давать сравнимую с автоматными реализациями скорость), то начинать а)писать статью б)доводить до production вида

   Из production фич мне видится:

   1. Все положенные свистелки в виде position tracking, error reporting и т.п.
   2. Врапперы, позволяющие юзать библиотеку в качестве drop-in replacement для parsec
   3. TODO

* org-mode configuration
#+STARTUP: overview
#+STARTUP: hidestars
#+STARTUP: logdone
#+PROPERTY: Effort_ALL  0:10 0:20 0:30 1:00 2:00 4:00 6:00 8:00
#+COLUMNS: %38ITEM(Details) %TAGS(Context) %7TODO(To Do) %5Effort(Time){:} %6CLOCKSUM{Total}
#+PROPERTY: Effort_ALL 0 0:10 0:20 0:30 1:00 2:00 3:00 4:00 8:00
#+TAGS: { WORKING(w) HOME(h) } KIDS(k) COMPUTER(c) PROJECT(p) READING(r) SAN(s)
#+TAGS: TRIP(t)
#+SEQ_TODO: TODO(t) STARTED(s) WAITING(w) APPT(a) | DONE(d) CANCELLED(c) DEFERRED(f)
